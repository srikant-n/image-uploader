{"version":3,"sources":["images/image.svg","components/DragAndDrog.jsx","components/FileSelection.jsx","components/Upload.jsx","components/UploadDone.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["DragAndDrop","props","dropRef","useRef","useState","dragCount","setDragCount","isImage","setIsImage","handleDrag","event","preventDefault","stopPropagation","handleDragIn","state","dataTransfer","items","type","match","handleDragOut","handleDrop","files","length","clearData","useEffect","div","current","addEventListener","removeEventListener","className","ref","children","FileSelection","Card","Body","Title","Text","onFileSelected","Img","src","image","alt","draggable","Button","as","variant","htmlFor","style","width","height","id","name","accept","onChange","target","Upload","UploadDone","isDone","showCopied","setShowCopied","color","size","getStatusText","Container","imageUrl","Toast","onClose","show","delay","autohide","InputGroup","FormControl","placeholder","aria-label","aria-describedby","readOnly","value","Append","onClick","navigator","clipboard","writeText","then","onClickNew","App","viewState","setViewState","setImageUrl","formData","FormData","append","fetch","method","body","res","ok","Error","statusText","text","url","catch","e","console","log","getView","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.849acbb8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/image.3710b8a3.svg\";","import { useEffect, useRef, useState } from \"react\";\r\n\r\n/**\r\n * Container that allows dragging and dropping images onto it\r\n * @param {Props} props Proerties passed from parent component\r\n */\r\nfunction DragAndDrop(props) {\r\n  const dropRef = useRef(null);\r\n  // When we go over child elements\r\n  const [dragCount, setDragCount] = useState(0);\r\n  // Is the file being dragged an image?\r\n  const [isImage, setIsImage] = useState(false);\r\n\r\n  function handleDrag(event) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n  }\r\n\r\n  /**\r\n   * File dragged into component\r\n   * @param {Event} event Dragged object event\r\n   */\r\n  function handleDragIn(event) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    setDragCount((state) => state + 1);\r\n    setIsImage(event.dataTransfer.items && event.dataTransfer.items[0].type.match(/image.*/));\r\n  }\r\n\r\n  /**\r\n   * File dragged out of component\r\n   * @param {Event} event Dragged object event\r\n   */\r\n  function handleDragOut(event) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    setDragCount((state) => {\r\n      state === 1 && setIsImage(false);\r\n      return state - 1;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * File dropped on component\r\n   * @param {Event} event Dropped object event\r\n   */\r\n  function handleDrop(event) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    setIsImage(false);\r\n    setDragCount(0);\r\n    if (\r\n      event.dataTransfer.files &&\r\n      event.dataTransfer.files.length > 0 &&\r\n      event.dataTransfer.files[0].type.match(/image.*/)\r\n    ) {\r\n      props.handleDrop && props.handleDrop(event.dataTransfer.files);\r\n      event.dataTransfer.clearData();\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    let div = dropRef.current;\r\n    div.addEventListener(\"dragenter\", handleDragIn);\r\n    div.addEventListener(\"dragleave\", handleDragOut);\r\n    div.addEventListener(\"dragover\", handleDrag);\r\n    div.addEventListener(\"drop\", handleDrop);\r\n\r\n    return () => {\r\n      // Clean up\r\n      div.removeEventListener(\"dragenter\", handleDragIn);\r\n      div.removeEventListener(\"dragleave\", handleDragOut);\r\n      div.removeEventListener(\"dragover\", handleDrag);\r\n      div.removeEventListener(\"drop\", handleDrop);\r\n    };\r\n  });\r\n\r\n  /**\r\n   * Highlight component based on the file type\r\n   */\r\n  function getHighlightClass() {\r\n    if (dragCount > 0) {\r\n      return isImage ? \"shadow-green\" : \"shadow-red\";\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={`image-container ${getHighlightClass()} ${props.className}`} ref={dropRef}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DragAndDrop;\r\n","import image from \"../images/image.svg\";\r\nimport { Button, Card } from \"react-bootstrap\";\r\nimport DragAndDrop from \"./DragAndDrog\";\r\n\r\n/**\r\n * File Selection view where the user can select an image to upload\r\n * @param {Props} props Properties passed from parent\r\n */\r\nfunction FileSelection(props) {\r\n  return (\r\n    <Card className=\"base-card upload-card\">\r\n      <Card.Body>\r\n        <Card.Title>Upload your image</Card.Title>\r\n        <Card.Text className=\"small-font\">File should be Jpeg, Png, ...</Card.Text>\r\n        <DragAndDrop\r\n          className=\"d-flex flex-column align-items-center justify-content-around\"\r\n          handleDrop={props.onFileSelected}\r\n        >\r\n          <Card.Img className=\"placeholder-image\" src={image} alt=\"\" draggable={false}></Card.Img>\r\n          <Card.Text>Drag & Drop image here</Card.Text>\r\n        </DragAndDrop>\r\n        <Card.Text>or</Card.Text>\r\n        <Button as=\"label\" variant=\"primary\" htmlFor=\"file\">\r\n          Choose A File\r\n        </Button>\r\n        <input\r\n          style={{ width: \"0\", height: \"0\" }}\r\n          type=\"file\"\r\n          id=\"file\"\r\n          name=\"file\"\r\n          accept=\"image/*\"\r\n          onChange={(event) => props.onFileSelected(event.target.files)}\r\n        />\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport { FileSelection };\r\n","import { Card, ProgressBar } from \"react-bootstrap\";\r\n\r\nfunction Upload() {\r\n  return (\r\n    <Card className=\"base-card uploading-card\">\r\n      <Card.Body>\r\n        <Card.Title>Uploading...</Card.Title>\r\n        <progress height=\"10px\" width=\"100%\">\r\n        {/* <ProgressBar now={50} /> */}\r\n        </progress>\r\n        \r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport { Upload };\r\n","import { useState } from \"react\";\r\nimport { Button, Card, Container, InputGroup, FormControl, Toast } from \"react-bootstrap\";\r\nimport { CheckCircleFill, XCircleFill } from \"react-bootstrap-icons\";\r\n\r\n/**\r\n * View to display on upload complete\r\n * @param {Object} props Props passed from parent\r\n */\r\nfunction UploadDone(props) {\r\n  const [showCopied, setShowCopied] = useState(false);\r\n\r\n  function onClickCopy(event) {\r\n    navigator.clipboard.writeText(props.imageUrl).then(setShowCopied(true));\r\n  }\r\n\r\n  /**\r\n   * Get the upload status icon to display\r\n   * @param {Boolean} isDone Has file been successfully uploaded?\r\n   */\r\n  function getStatusIcon(isDone) {\r\n    const size = 35;\r\n    return isDone ? (\r\n      <CheckCircleFill color=\"green\" size={size} />\r\n    ) : (\r\n      <XCircleFill color=\"red\" size={size} />\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the upload status text to display\r\n   * @param {Boolean} isDone Has file been successfully uploaded?\r\n   */\r\n  function getStatusText(isDone) {\r\n    return isDone ? \"Uploaded Successfully\" : \"Upload Failed :(\";\r\n  }\r\n\r\n  return (\r\n    <Card className=\"base-card\">\r\n      <Card.Body className=\"d-flex flex-column align-items-center\">\r\n        {getStatusIcon(props.isDone)}\r\n        <Card.Title>{getStatusText(props.isDone)}</Card.Title>\r\n        {props.isDone && (\r\n          <Container className=\"preview-image\">\r\n            <Card.Img\r\n              className=\"preview-image\"\r\n              src={props.imageUrl}\r\n              alt=\"Uploaded Image\"\r\n            ></Card.Img>\r\n          </Container>\r\n        )}\r\n        <div className=\"toast-holder\">\r\n          <Toast onClose={() => setShowCopied(false)} show={showCopied} delay={2500} autohide>\r\n            <Toast.Body>Link copied</Toast.Body>\r\n          </Toast>\r\n        </div>\r\n        {props.isDone && (\r\n          <InputGroup>\r\n            <FormControl\r\n              placeholder=\"Image Link\"\r\n              aria-label=\"Image Link\"\r\n              aria-describedby=\"basic-addon2\"\r\n              readOnly\r\n              value={props.imageUrl}\r\n            />\r\n            <InputGroup.Append>\r\n              <Button variant=\"primary\" onClick={onClickCopy}>\r\n                Copy Link\r\n              </Button>\r\n            </InputGroup.Append>\r\n          </InputGroup>\r\n        )}\r\n        <Button variant=\"info\" onClick={props.onClickNew}>\r\n          {props.isDone ? \"Upload Another Image\" : \"Try Again\"}\r\n        </Button>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport { UploadDone };\r\n","// import image from \"/image.svg\";\nimport \"./App.scss\";\nimport { FileSelection } from \"./components/FileSelection\";\nimport { Upload } from \"./components/Upload\";\nimport { useState } from \"react\";\nimport { UploadDone } from \"./components/UploadDone\";\n\n// View states\nconst STATE_SELECT_FILE = 0;\nconst STATE_UPLOAD = 1;\nconst STATE_UPLOAD_FINISH = 2;\n\n/**\n * Main App\n */\nfunction App() {\n  // Current view state\n  const [viewState, setViewState] = useState(STATE_SELECT_FILE);\n  // Image URL to display and copy\n  const [imageUrl, setImageUrl] = useState(\"\");\n\n  /**\n   * File has been selected by user\n   * @param {Event} event Event with selected file data\n   */\n  function onFileSelected(files) {\n    // Check if file is an image\n    if (files[0] && files[0].type.match(/image.*/)) {\n      const formData = new FormData();\n      setViewState(STATE_UPLOAD);\n      formData.append(\"image\", files[0]);\n      // Upload selected file to server\n      fetch(\"/image\", {\n        method: \"POST\",\n        body: formData,\n      })\n        .then((res) => {\n          // Check for error\n          if (!res.ok) {\n            throw Error(res.statusText);\n          }\n          // Get text from response\n          return res.text();\n        })\n        .then((url) => {\n          // URL obtained, move to finish view\n          setImageUrl(url);\n          setViewState(STATE_UPLOAD_FINISH);\n        })\n        .catch((e) => {\n          // Error uploading\n          console.log(e);\n          setImageUrl(\"\");\n          setViewState(STATE_UPLOAD_FINISH);\n        });\n    }\n  }\n\n  /**\n   * Upload new file\n   */\n  function onClickNew() {\n    setViewState(STATE_SELECT_FILE);\n  }\n\n  /**\n   * Get the current view to display\n   */\n  function getView() {\n    switch (viewState) {\n      default:\n      case STATE_SELECT_FILE:\n        return <FileSelection onFileSelected={onFileSelected} />;\n      case STATE_UPLOAD:\n        return <Upload />;\n      case STATE_UPLOAD_FINISH:\n        return (\n          <UploadDone isDone={imageUrl.length > 0} imageUrl={imageUrl} onClickNew={onClickNew} />\n        );\n    }\n  }\n\n  return getView();\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}